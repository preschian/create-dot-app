name: Package Managers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deno-matrix: ${{ steps.set-deno-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for template changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            next-dedot:
              - 'templates/next-dedot/**'
            next-papi:
              - 'templates/next-papi/**'
            nuxt-dedot:
              - 'templates/nuxt-dedot/**'
            nuxt-papi:
              - 'templates/nuxt-papi/**'
            react-dedot:
              - 'templates/react-dedot/**'
            react-papi:
              - 'templates/react-papi/**'
            vue-dedot:
              - 'templates/vue-dedot/**'
            vue-papi:
              - 'templates/vue-papi/**'
      
      - name: Set matrix based on changes
        id: set-matrix
        run: |
          CHANGED_TEMPLATES='${{ steps.filter.outputs.changes }}'
          echo "Changed templates: $CHANGED_TEMPLATES"
          
          # Generate matrix for all changed templates with multiple package managers
          MATRIX=$(echo "$CHANGED_TEMPLATES" | jq -c '
            if . == [] then 
              {"include": []} 
            else 
              {"include": [
                (.[] as $template | 
                  ["npm", "bun"] | .[] as $pm | 
                  {"template": $template, "working-directory": "templates/\($template)", "package-manager": $pm}
                )
              ]} 
            end
          ' || echo '{"include": []}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
      
      - name: Set Deno matrix based on changes
        id: set-deno-matrix
        run: |
          CHANGED_TEMPLATES='${{ steps.filter.outputs.changes }}'
          echo "Changed templates for Deno: $CHANGED_TEMPLATES"
          
          # Generate matrix only for React and Vue templates
          DENO_MATRIX=$(echo "$CHANGED_TEMPLATES" | jq -c '
            if . == [] then 
              {"include": []} 
            else 
              {"include": [.[] | select(startswith("react-") or startswith("vue-")) | {"template": ., "working-directory": "templates/\(.)"}]} 
            end
          ' || echo '{"include": []}')
          echo "matrix=$DENO_MATRIX" >> $GITHUB_OUTPUT

  node:
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.matrix).include != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x


      - name: Setup Bun
        if: matrix.package-manager == 'bun'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.package-manager }} install

      - name: Lint code
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.package-manager }} run lint

      - name: Build project
        working-directory: ${{ matrix.working-directory }}
        run: ${{ matrix.package-manager }} run build

  deno:
    needs: changes
    if: ${{ fromJSON(needs.changes.outputs.deno-matrix).include != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.changes.outputs.deno-matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno install

      - name: Run postinstall with Deno
        if: contains(matrix.working-directory, 'papi')
        working-directory: ${{ matrix.working-directory }}
        run: deno run postinstall

      - name: Lint code with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno task lint

      - name: Build project with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno task build
