name: Package Managers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      deno-matrix: ${{ steps.set-deno-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for template changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            next-dedot:
              - 'templates/next-dedot/**'
            next-papi:
              - 'templates/next-papi/**'
            nuxt-dedot:
              - 'templates/nuxt-dedot/**'
            nuxt-papi:
              - 'templates/nuxt-papi/**'
            react-dedot:
              - 'templates/react-dedot/**'
            react-papi:
              - 'templates/react-papi/**'
            vue-dedot:
              - 'templates/vue-dedot/**'
            vue-papi:
              - 'templates/vue-papi/**'
      
      - name: Set matrix based on changes
        id: set-matrix
        run: |
          CHANGED_TEMPLATES='${{ steps.filter.outputs.changes }}'
          echo "Changed templates: $CHANGED_TEMPLATES"
          
          if [ "$CHANGED_TEMPLATES" = "[]" ] || [ -z "$CHANGED_TEMPLATES" ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            MATRIX_JSON="{"
            MATRIX_JSON+='"include":['
            
            FIRST=true
            for template in $(echo $CHANGED_TEMPLATES | jq -r '.[]'); do
              if [ "$FIRST" = false ]; then
                MATRIX_JSON+=','
              fi
              MATRIX_JSON+="{\"template\":\"$template\",\"working-directory\":\"templates/$template\"}"
              FIRST=false
            done
            
            MATRIX_JSON+=']}'
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          fi
      
      - name: Set Deno matrix based on changes
        id: set-deno-matrix
        run: |
          CHANGED_TEMPLATES='${{ steps.filter.outputs.changes }}'
          echo "Changed templates for Deno: $CHANGED_TEMPLATES"
          
          if [ "$CHANGED_TEMPLATES" = "[]" ] || [ -z "$CHANGED_TEMPLATES" ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            MATRIX_JSON="{"
            MATRIX_JSON+='"include":['
            
            FIRST=true
            for template in $(echo $CHANGED_TEMPLATES | jq -r '.[]'); do
              # Only include React and Vue templates for Deno
              if [[ "$template" == "react-"* ]] || [[ "$template" == "vue-"* ]]; then
                if [ "$FIRST" = false ]; then
                  MATRIX_JSON+=','
                fi
                MATRIX_JSON+="{\"template\":\"$template\",\"working-directory\":\"templates/$template\"}"
                FIRST=false
              fi
            done
            
            MATRIX_JSON+=']}'
            echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          fi

  node:
    needs: changes
    if: ${{ needs.changes.outputs.matrix != '{"include":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.changes.outputs.matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Install dependencies with npm
        working-directory: ${{ matrix.working-directory }}
        run: npm install

      - name: Lint code
        working-directory: ${{ matrix.working-directory }}
        run: npm run lint

      - name: Build project with npm
        working-directory: ${{ matrix.working-directory }}
        run: npm run build

  deno:
    needs: changes
    if: ${{ needs.changes.outputs.deno-matrix != '{"include":[]}' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.changes.outputs.deno-matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Install dependencies with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno install

      - name: Run postinstall with Deno
        if: contains(matrix.working-directory, 'papi')
        working-directory: ${{ matrix.working-directory }}
        run: deno run postinstall

      - name: Lint code with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno task lint

      - name: Build project with Deno
        working-directory: ${{ matrix.working-directory }}
        run: deno task build
