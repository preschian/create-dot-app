// Generated by dedot cli

import type { SubstrateApi } from 'dedot/chaintypes'
import type { InkGenericContractApi, WithLazyStorage } from 'dedot/contracts'
import type {
  RpcVersion,
  VersionedGenericSubstrateApi,
} from 'dedot/types'
import type { ConstructorQuery } from './constructor-query.js'
import type { ConstructorTx } from './constructor-tx.js'
import type { ContractEvents } from './events.js'
import type { ContractQuery } from './query.js'
import type { ContractTx } from './tx.js'
import type { FlipperContract, InkPrimitivesLangError } from './types.js'

export * from './types.js'

/**
 * @name: FlipperContractApi
 * @contractName: flipper
 * @contractVersion: 0.1.0
 * @authors: 0xPresc <create-dot-app>
 * @language: ink! 6.0.0-alpha.4
 */
export interface FlipperContractApi<
  Rv extends RpcVersion = RpcVersion,
  ChainApi extends VersionedGenericSubstrateApi = SubstrateApi,
> extends InkGenericContractApi<Rv, ChainApi> {
  metadataType: 'ink'
  query: ContractQuery<ChainApi[Rv], 'ink'>
  tx: ContractTx<ChainApi[Rv], 'ink'>
  constructorQuery: ConstructorQuery<ChainApi[Rv], 'ink'>
  constructorTx: ConstructorTx<ChainApi[Rv], FlipperContractApi, 'ink'>
  events: ContractEvents<ChainApi[Rv], 'ink'>
  storage: {
    root: () => Promise<FlipperContract>
    lazy: () => WithLazyStorage<FlipperContract>
  }

  types: {
    ChainApi: ChainApi[Rv]
    RootStorage: FlipperContract
    LazyStorage: WithLazyStorage<FlipperContract>
    LangError: InkPrimitivesLangError
  }
}
